#ifndef FLOCKINGSIM_H
#define FLOCKINGSIM_H

#include "openglwidget.h"
#include "particle.h"
#include "flocksolver.h"
#include "flockHash.h"
#include <ngl/Vec3.h>
#include <ngl/Mat4.h>
#include <ngl/TransformStack.h>

class flockingSim : public OpenGLWidget
{
    Q_OBJECT //must include to gain access to qt stuff
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    explicit flockingSim(const QGLFormat _format, QWidget *_parent=0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~flockingSim();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief called everytime the window resizes
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(const int _w, const int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a timer to update our scene
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent(QTimerEvent *);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a simple function to load our tranform stack to our shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatriciesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to create our particles
    //----------------------------------------------------------------------------------------------------------------------
    void createParticles();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator to set how many particles to create
    //----------------------------------------------------------------------------------------------------------------------
    inline void setNumParticles(int _numParticles){m_numParticles = _numParticles;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our flockSolver to calculate the 3 rules of flocking sims
    //----------------------------------------------------------------------------------------------------------------------
    flockSolver m_flockSolver;
    //----------------------------------------------------------------------------------------------------------------------


private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our hash solver
    //----------------------------------------------------------------------------------------------------------------------
    flockHash m_flockHash;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a vector to hold our particles
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<particle*> m_particleList;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an int to hold how many particles we wish to create
    //----------------------------------------------------------------------------------------------------------------------
    int m_numParticles;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------

};

#endif // FLOCKINGSIM_H
